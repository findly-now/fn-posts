version: '3.8'

# =============================================================================
# Local Development Infrastructure ONLY
# =============================================================================
# This docker-compose file provides local development services for convenience.
#
# PRODUCTION DEPLOYMENT uses cloud services exclusively:
# - Supabase (PostgreSQL + PostGIS) - configured via POSTGRES_URL
# - Confluent Cloud (Kafka) - configured via KAFKA_* variables
# - Google Cloud Storage (GCS) - configured via BUCKET_* variables
#
# For cloud deployment setup, see /scripts/setup-cloud-infra.sh
# For environment configuration, see .env.cloud.example
# =============================================================================

services:
  # =============================================================================
  # DATABASE: PostgreSQL with PostGIS (LOCAL DEVELOPMENT ONLY)
  # =============================================================================
  # Production uses Supabase with:
  # - Managed PostgreSQL + PostGIS
  # - Built-in auth and real-time features
  # - Global edge network
  # - Configured via POSTGRES_URL environment variable
  postgres:
    image: postgis/postgis:15-3.3
    container_name: posts-postgres
    environment:
      POSTGRES_DB: posts_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d
    networks:
      - posts-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d posts_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # =============================================================================
  # STORAGE: MinIO S3-Compatible Storage (LOCAL DEVELOPMENT ONLY)
  # =============================================================================
  # Production uses Google Cloud Storage with:
  # - Global CDN with automatic optimization
  # - Lifecycle management and archival
  # - 99.999999999% durability
  # - Configured via BUCKET_* environment variables
  minio:
    image: minio/minio:latest
    container_name: posts-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"  # API
      - "9001:9001"  # Console
    volumes:
      - minio_data:/data
    networks:
      - posts-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # MinIO bucket initialization
  minio-setup:
    image: minio/mc:latest
    container_name: posts-minio-setup
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set myminio http://minio:9000 minioadmin minioadmin;
      /usr/bin/mc mb myminio/posts-bucket;
      /usr/bin/mc policy set public myminio/posts-bucket;
      exit 0;
      "
    networks:
      - posts-network

  # =============================================================================
  # EVENT STREAMING: Kafka with Zookeeper (LOCAL DEVELOPMENT ONLY)
  # =============================================================================
  # Production uses Confluent Cloud with:
  # - Fully managed Kafka with auto-scaling
  # - Built-in schema registry
  # - Multi-region replication
  # - Configured via KAFKA_* environment variables
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: posts-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - posts-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: posts-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    networks:
      - posts-network
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kafka UI for local development monitoring
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: posts-kafka-ui
    depends_on:
      - kafka
    ports:
      - "8081:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - posts-network

  # =============================================================================
  # CACHING: Redis (OPTIONAL - Both Local and Cloud)
  # =============================================================================
  # Used for caching in both local and cloud environments
  # In production: Consider managed Redis (Google Cloud Memorystore, AWS ElastiCache)
  redis:
    image: redis:7-alpine
    container_name: posts-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - posts-network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # =============================================================================
  # POSTS SERVICE: Go Application (LOCAL DEVELOPMENT ONLY)
  # =============================================================================
  # This service configuration is for local development only.
  # It connects to the local infrastructure services defined above.
  #
  # For cloud deployment:
  # - Use deployment scripts in /scripts/
  # - Configure with .env.cloud.example
  # - Service connects to Supabase, GCS, and Confluent Cloud
  # =============================================================================

  # posts-service:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #   container_name: posts-service
  #   depends_on:
  #     # For local development
  #     postgres:
  #       condition: service_healthy
  #     kafka:
  #       condition: service_healthy
  #     minio:
  #       condition: service_healthy
  #     # Optional for both local and cloud
  #     redis:
  #       condition: service_healthy
  #   ports:
  #     - "8080:8080"
  #   environment:
  #     # =============================================================================
  #     # LOCAL DEVELOPMENT CONFIGURATION
  #     # =============================================================================
  #     POSTGRES_URL: postgres://postgres:postgres@postgres:5432/posts_db?sslmode=disable
  #     MINIO_ENDPOINT: minio:9000
  #     MINIO_ACCESS_KEY: minioadmin
  #     MINIO_SECRET_KEY: minioadmin
  #     MINIO_BUCKET: posts-bucket
  #     MINIO_USE_SSL: false
  #     KAFKA_BOOTSTRAP_SERVERS: kafka:29092
  #     KAFKA_TOPIC: posts.events
  #     JWT_SECRET: your-secret-key-change-in-production
  #
  #     # =============================================================================
  #     # CLOUD CONFIGURATION (Override with .env.cloud or environment)
  #     # =============================================================================
  #     # STORAGE_PROVIDER: gcs
  #     # EVENT_PROVIDER: confluent
  #     # DATABASE_URL: postgresql://postgres:[password]@db.[project].supabase.co:5432/postgres?sslmode=require
  #     # SUPABASE_URL: https://[project].supabase.co
  #     # SUPABASE_ANON_KEY: your-anon-key
  #     # GCS_PROJECT_ID: your-gcs-project-id
  #     # GCS_BUCKET_NAME: posts-bucket-prod
  #     # GOOGLE_APPLICATION_CREDENTIALS: /app/service-account.json
  #     # CONFLUENT_BOOTSTRAP_SERVERS: your-cluster.confluent.cloud:9092
  #     # CONFLUENT_API_KEY: your-api-key
  #     # CONFLUENT_API_SECRET: your-api-secret
  #   networks:
  #     - posts-network
  #   restart: unless-stopped
  #   # volumes:
  #   #   # For cloud deployment, mount service account key
  #   #   - ./service-account.json:/app/service-account.json:ro

volumes:
  postgres_data:
  minio_data:
  redis_data:

networks:
  posts-network:
    driver: bridge