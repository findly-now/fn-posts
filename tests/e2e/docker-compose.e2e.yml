version: '3.8'

# =============================================================================
# E2E TEST ENVIRONMENT
# =============================================================================
# This docker-compose file provides the complete infrastructure needed for
# E2E testing of the Posts service. It includes all services and dependencies.
# =============================================================================

services:
  # =============================================================================
  # DATABASE: PostgreSQL with PostGIS (TEST)
  # =============================================================================
  postgres-test:
    image: postgis/postgis:15-3.3
    container_name: posts-postgres-test
    environment:
      POSTGRES_DB: posts_test_db
      POSTGRES_USER: test_user
      POSTGRES_PASSWORD: test_pass
    ports:
      - "5433:5432"
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
    networks:
      - posts-test-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U test_user -d posts_test_db"]
      interval: 5s
      timeout: 5s
      retries: 5

  # =============================================================================
  # STORAGE: MinIO S3-Compatible Storage (TEST)
  # =============================================================================
  minio-test:
    image: minio/minio:latest
    container_name: posts-minio-test
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: testadmin
      MINIO_ROOT_PASSWORD: testpass123
    ports:
      - "9001:9000"  # API
      - "9002:9001"  # Console
    volumes:
      - minio_test_data:/data
    networks:
      - posts-test-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 15s
      timeout: 10s
      retries: 3

  # MinIO bucket initialization for tests
  minio-test-setup:
    image: minio/mc:latest
    container_name: posts-minio-test-setup
    depends_on:
      minio-test:
        condition: service_healthy
    networks:
      - posts-test-network
    entrypoint: >
      /bin/sh -c "
      mc alias set minio-test http://minio-test:9000 testadmin testpass123;
      mc mb minio-test/posts-test-bucket;
      mc policy set public minio-test/posts-test-bucket;
      echo 'MinIO test setup complete'
      "

  # =============================================================================
  # EVENT STREAMING: Kafka with Zookeeper (TEST)
  # =============================================================================
  zookeeper-test:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: posts-zookeeper-test
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - posts-test-network

  kafka-test:
    image: confluentinc/cp-kafka:7.4.0
    container_name: posts-kafka-test
    depends_on:
      - zookeeper-test
    ports:
      - "9093:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-test:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-test:29092,PLAINTEXT_HOST://localhost:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    networks:
      - posts-test-network
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 5

  # =============================================================================
  # POSTS SERVICE (TEST BUILD)
  # =============================================================================
  posts-service-test:
    build:
      context: ../../
      dockerfile: Dockerfile
    container_name: posts-service-test
    depends_on:
      postgres-test:
        condition: service_healthy
      kafka-test:
        condition: service_healthy
      minio-test-setup:
        condition: service_completed_successfully
    ports:
      - "8081:8080"
    environment:
      # Test environment configuration
      PORT: 8080
      ENVIRONMENT: test

      # Database configuration
      POSTGRES_URL: postgres://test_user:test_pass@postgres-test:5432/posts_test_db?sslmode=disable

      # MinIO configuration (test storage)
      MINIO_ENDPOINT: minio-test:9000
      MINIO_ACCESS_KEY: testadmin
      MINIO_SECRET_KEY: testpass123
      MINIO_BUCKET: posts-test-bucket
      MINIO_USE_SSL: false

      # Kafka configuration (test events)
      KAFKA_BOOTSTRAP_SERVERS: kafka-test:29092
      KAFKA_TOPIC: posts.test.events

      # Test JWT configuration
      JWT_SECRET: test-secret-key-for-e2e-tests
      JWT_EXPIRY: 24h

      # Feature flags for testing
      FEATURE_ANALYTICS_ENABLED: true
      FEATURE_REAL_TIME_UPDATES: true
      FEATURE_IMAGE_OPTIMIZATION: false
      FEATURE_THUMBNAIL_GENERATION: false

      # Logging for tests
      LOG_LEVEL: info
      LOG_FORMAT: text
    networks:
      - posts-test-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s

volumes:
  postgres_test_data:
  minio_test_data:

networks:
  posts-test-network:
    driver: bridge